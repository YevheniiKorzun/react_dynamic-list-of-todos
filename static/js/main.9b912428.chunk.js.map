{"version":3,"sources":["components/Loader/Loader.tsx","components/ErrorMessage/ErrorMessage.tsx","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Loader","className","ErrorMessage","errorMessage","TodoList","todos","selectedUserId","inputValue","selectValue","loading","selectUserHandler","changeInputValue","changeSelectValue","randomize","InputGroup","FormControl","value","onChange","placeholder","Form","Select","type","onClick","length","map","todo","cn","completed","htmlFor","id","checked","readOnly","title","userId","getTodosFromServer","complited","API_TODOS_URL","undefined","toString","fetch","then","response","json","getUser","API_USERS_URL","CurrentUser","state","user","isNoUserErrorVisible","clear","setState","props","clearUser","this","selectUser","prevProps","a","setTimeout","name","email","phone","React","PureComponent","App","getTodos","todosFromServer","userNewId","event","target","filterBySelect","getTodosFilteredByInput","filter","toLowerCase","includes","shuffle","randomizedTodos","i","j","Math","floor","random","prevState","console","log","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b912428.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"loader-container\">\n    <div className=\"lds-spinner\">\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './ErrorMessage.scss';\n\ntype Props = {\n  errorMessage: string,\n};\n\nexport const ErrorMessage: React.FC<Props> = ({ errorMessage }) => {\n  return (\n    <div className=\"error\">\n      <h2 className=\"error__message\">{errorMessage}</h2>\n    </div>\n  );\n};\n","import React from 'react';\nimport './TodoList.scss';\n\nimport cn from 'classnames';\nimport {\n  InputGroup,\n  FormControl,\n  Form,\n} from 'react-bootstrap';\nimport { Loader } from '../Loader';\nimport { ErrorMessage } from '../ErrorMessage';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  inputValue: string,\n  selectValue: string,\n  loading: boolean,\n  errorMessage: string,\n  selectUserHandler: (userId: string) => void,\n  changeInputValue: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  changeSelectValue: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  randomize: () => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  inputValue,\n  selectValue,\n  loading,\n  errorMessage,\n  selectUserHandler,\n  changeInputValue,\n  changeSelectValue,\n  randomize,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div>\n      <InputGroup className=\"mb-3\">\n        <div className=\"TodoList__control-panel\">\n          <div className=\"TodoList__input\">\n            <FormControl\n              value={inputValue}\n              onChange={changeInputValue}\n              placeholder=\"Search by title\"\n            />\n          </div>\n          <div className=\"TodoList__select\">\n            <Form.Select\n              value={selectValue}\n              onChange={changeSelectValue}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"not completed\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </Form.Select>\n          </div>\n          <button\n            className=\"button TodoList__button\"\n            type=\"button\"\n            onClick={randomize}\n          >\n            Randomize\n          </button>\n        </div>\n      </InputGroup>\n    </div>\n\n    {loading ? (\n      <Loader />\n    ) : (\n      <>\n        {errorMessage.length ? (\n          <ErrorMessage errorMessage={errorMessage} />\n        ) : (\n          <div className=\"TodoList__list-container\">\n            <ul className=\"TodoList__list\">\n              {todos.length !== 0 && todos.map(todo => (\n                <li\n                  className={cn('TodoList__item',\n                    { 'TodoList__item--checked': todo.completed },\n                    { 'TodoList__item--unchecked': !todo.completed })}\n                  key={todo.id}\n                >\n                  <label htmlFor={todo.id}>\n                    <input\n                      id={todo.id}\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      readOnly\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className={cn('TodoList__user-button button',\n                      { 'TodoList__user-button--selected': +todo.userId === selectedUserId })}\n                    type=\"button\"\n                    value={todo.userId}\n                    onClick={() => selectUserHandler(todo.userId)}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </>\n    )}\n  </div>\n);\n","export function getTodosFromServer(complited?: boolean): Promise<Todo[]> {\n  let API_TODOS_URL: string;\n\n  if (complited !== undefined) {\n    API_TODOS_URL = `https://mate.academy/students-api/todos?completed=${complited.toString()}`;\n  } else {\n    // eslint-disable-next-line\n    API_TODOS_URL = `https://mate.academy/students-api/todos`;\n  }\n\n  return fetch(API_TODOS_URL)\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  // eslint-disable-next-line\n  const API_USERS_URL = `https://mate.academy/students-api/users/${userId}`;\n\n  return fetch(API_USERS_URL)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  userId: number,\n  clearUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n  isNoUserErrorVisible: boolean,\n  loading: boolean,\n};\n\nexport class CurrentUser extends React.PureComponent<Props, State> {\n  state: State = {\n    user: null,\n    isNoUserErrorVisible: false,\n    loading: false,\n  };\n\n  componentDidMount() {\n    this.selectUser();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (this.props.userId !== prevProps.userId) {\n      await this.selectUser();\n    }\n  }\n\n  clear = () => {\n    this.setState({\n      user: null,\n    });\n\n    this.props.clearUser();\n  };\n\n  async selectUser() {\n    this.setState({ loading: true });\n\n    try {\n      const user: User = await getUser(this.props.userId);\n\n      this.setState({\n        user,\n        isNoUserErrorVisible: false,\n      });\n    } catch (error) {\n      this.setState({ isNoUserErrorVisible: true });\n    } finally {\n      setTimeout(() => {\n        this.setState({ loading: false });\n      }, 500);\n    }\n  }\n\n  render() {\n    const { user, isNoUserErrorVisible, loading } = this.state;\n\n    if (loading) {\n      return (\n        <Loader />\n      );\n    }\n\n    return (\n      <div>\n        {isNoUserErrorVisible && (\n          <div>\n            <h2\n              className=\"CurrentUser__title CurrentUser__title--error\"\n            >\n              <span>Error: Can not find the user!</span>\n            </h2>\n            <div className=\"CurrentUser__button\">\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.clear}\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        )}\n        {!isNoUserErrorVisible && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n            <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n            <p className=\"CurrentUser__email\">{user?.email}</p>\n            <p className=\"CurrentUser__phone\">{user?.phone}</p>\n            <div className=\"CurrentUser__button\">\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.clear}\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosFromServer } from './api';\n\ninterface State {\n  todos: Todo[],\n  selectedUserId: number,\n  inputValue: string,\n  selectValue: string,\n  loading: boolean,\n  errorMessage: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n    inputValue: '',\n    selectValue: 'all',\n    loading: false,\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    this.getTodos();\n  }\n\n  getTodos = async (completed?: boolean) => {\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      const todosFromServer = await getTodosFromServer(completed);\n\n      this.setState({\n        todos: [...todosFromServer],\n      });\n    } catch (error) {\n      this.setState({\n        errorMessage: 'Oops... Server is not responding',\n      });\n    } finally {\n      setTimeout(() => {\n        this.setState({\n          loading: false,\n        });\n      }, 500);\n    }\n  };\n\n  selectUserHandler = (userId: string) => {\n    const userNewId = +userId;\n\n    if (this.state.selectedUserId !== userNewId) {\n      this.setState({ selectedUserId: userNewId });\n    }\n  };\n\n  changeInputValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      inputValue: value,\n    });\n  };\n\n  changeSelectValue = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.filterBySelect(value);\n\n    this.setState({\n      selectValue: value,\n    });\n  };\n\n  filterBySelect = async (selectValue: string) => {\n    this.setState({\n      loading: true,\n    });\n\n    switch (selectValue) {\n      case 'completed':\n        this.getTodos(true);\n        break;\n\n      case 'not completed':\n        this.getTodos(false);\n        break;\n\n      default:\n        this.getTodos();\n        break;\n    }\n  };\n\n  getTodosFilteredByInput = (todos: Todo[], inputValue: string) => {\n    if (inputValue.length) {\n      return todos\n        .filter(todo => todo.title.toLowerCase().includes(inputValue.toLowerCase()));\n    }\n\n    return todos;\n  };\n\n  shuffle = (todos: Todo[]) => {\n    const randomizedTodos = todos;\n\n    for (let i = randomizedTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [randomizedTodos[i], randomizedTodos[j]] = [randomizedTodos[j], randomizedTodos[i]];\n    }\n\n    return randomizedTodos;\n  };\n\n  randomize = () => {\n    this.setState(prevState => ({\n      todos: this.shuffle(prevState.todos),\n    }));\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      selectValue,\n      inputValue,\n      todos,\n      loading,\n      errorMessage,\n    } = this.state;\n\n    // eslint-disable-next-line no-console\n    console.log(errorMessage);\n\n    return (\n      <>\n        <div className=\"App\">\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={this.getTodosFilteredByInput(todos, inputValue)}\n              selectedUserId={selectedUserId}\n              inputValue={this.state.inputValue}\n              selectValue={selectValue}\n              loading={loading}\n              errorMessage={errorMessage}\n              selectUserHandler={this.selectUserHandler}\n              changeInputValue={this.changeInputValue}\n              changeSelectValue={this.changeSelectValue}\n              randomize={this.randomize}\n            />\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearUser={this.clearUser}\n                />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}