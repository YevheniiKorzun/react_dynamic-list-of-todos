{"version":3,"sources":["components/Loader/Loader.tsx","components/ErrorMessage/ErrorMessage.tsx","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Loader","className","ErrorMessage","errorMessage","TodoList","todos","selectedUserId","inputValue","selectValue","loading","selectUserHandler","changeInputValue","changeSelectValue","randomize","InputGroup","FormControl","value","onChange","placeholder","Form","Select","type","onClick","length","map","todo","cn","completed","htmlFor","id","checked","readOnly","title","userId","API_URL","getTodosFromServer","url","undefined","toString","fetch","then","response","json","getUserFromServer","CurrentUser","state","user","isNoUserErrorVisible","clear","setState","props","clearUser","this","selectUser","prevProps","a","setTimeout","name","email","phone","React","PureComponent","App","getTodos","todosFromServer","userNewId","event","target","filterBySelect","getTodosFilteredByInput","filter","toLowerCase","includes","shuffle","randomizedTodos","i","j","Math","floor","random","prevState","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.940fdf67.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"loader-container\">\n    <div className=\"lds-spinner\">\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './ErrorMessage.scss';\n\ntype Props = {\n  errorMessage: string,\n};\n\nexport const ErrorMessage: React.FC<Props> = ({ errorMessage }) => {\n  return (\n    <div className=\"error\">\n      <h2 className=\"error__message\">{errorMessage}</h2>\n    </div>\n  );\n};\n","import React from 'react';\nimport './TodoList.scss';\n\nimport cn from 'classnames';\nimport {\n  InputGroup,\n  FormControl,\n  Form,\n} from 'react-bootstrap';\nimport { Loader } from '../Loader';\nimport { ErrorMessage } from '../ErrorMessage';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  inputValue: string,\n  selectValue: string,\n  loading: boolean,\n  errorMessage: string,\n  selectUserHandler: (userId: string) => void,\n  changeInputValue: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  changeSelectValue: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  randomize: () => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  inputValue,\n  selectValue,\n  loading,\n  errorMessage,\n  selectUserHandler,\n  changeInputValue,\n  changeSelectValue,\n  randomize,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div>\n      <InputGroup className=\"mb-3\">\n        <div className=\"TodoList__control-panel\">\n          <div className=\"TodoList__input\">\n            <FormControl\n              value={inputValue}\n              onChange={changeInputValue}\n              placeholder=\"Search by title\"\n            />\n          </div>\n          <div className=\"TodoList__select\">\n            <Form.Select\n              value={selectValue}\n              onChange={changeSelectValue}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"not completed\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </Form.Select>\n          </div>\n          <button\n            className=\"button TodoList__button\"\n            type=\"button\"\n            onClick={randomize}\n          >\n            Randomize\n          </button>\n        </div>\n      </InputGroup>\n    </div>\n\n    {loading ? (\n      <Loader />\n    ) : (\n      <>\n        {errorMessage.length ? (\n          <ErrorMessage errorMessage={errorMessage} />\n        ) : (\n          <div className=\"TodoList__list-container\">\n            <ul className=\"TodoList__list\">\n              {todos.length !== 0 && todos.map(todo => (\n                <li\n                  className={cn(\n                    'TodoList__item',\n                    {\n                      'TodoList__item--checked': todo.completed,\n                      'TodoList__item--unchecked': !todo.completed,\n                    },\n                  )}\n                  key={todo.id}\n                >\n                  <label htmlFor={todo.id}>\n                    <input\n                      id={todo.id}\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      readOnly\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className={cn(\n                      'TodoList__user-button button',\n                      { 'TodoList__user-button--selected': +todo.userId === selectedUserId },\n                    )}\n                    type=\"button\"\n                    value={todo.userId}\n                    onClick={() => selectUserHandler(todo.userId)}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </>\n    )}\n  </div>\n);\n","const API_URL = 'https://mate.academy/students-api';\n\nexport function getTodosFromServer(completed?: boolean): Promise<Todo[]> {\n  let url: string;\n\n  if (completed !== undefined) {\n    url = `${API_URL}/todos?completed=${completed.toString()}`;\n  } else {\n    url = `${API_URL}/todos`;\n  }\n\n  return fetch(url)\n    .then(response => response.json());\n}\n\nexport function getUserFromServer(userId: number): Promise<User> {\n  const url = `${API_URL}/users/${userId}`;\n\n  return fetch(url)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport cn from 'classnames';\nimport { getUserFromServer } from '../../api';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  userId: number,\n  clearUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n  isNoUserErrorVisible: boolean,\n  loading: boolean,\n};\n\nexport class CurrentUser extends React.PureComponent<Props, State> {\n  state: State = {\n    user: null,\n    isNoUserErrorVisible: false,\n    loading: false,\n  };\n\n  componentDidMount() {\n    this.selectUser();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (this.props.userId !== prevProps.userId) {\n      await this.selectUser();\n    }\n  }\n\n  clear = () => {\n    this.setState({\n      user: null,\n    });\n\n    this.props.clearUser();\n  };\n\n  async selectUser() {\n    this.setState({ loading: true });\n\n    try {\n      const user: User = await getUserFromServer(this.props.userId);\n\n      this.setState({\n        user,\n        isNoUserErrorVisible: false,\n      });\n    } catch (error) {\n      this.setState({ isNoUserErrorVisible: true });\n    } finally {\n      setTimeout(() => {\n        this.setState({ loading: false });\n      }, 500);\n    }\n  }\n\n  render() {\n    const { user, isNoUserErrorVisible, loading } = this.state;\n\n    if (loading) {\n      return (\n        <Loader />\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className={cn(\n          'CurrentUser__title',\n          { 'CurrentUser__title--error': isNoUserErrorVisible },\n        )}\n        >\n          <span>\n            {isNoUserErrorVisible\n              ? 'Error: Can not find the user!'\n              : `Selected user: ${user?.id}`}\n          </span>\n        </h2>\n\n        {!isNoUserErrorVisible && (\n          <>\n            <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n            <p className=\"CurrentUser__email\">{user?.email}</p>\n            <p className=\"CurrentUser__phone\">{user?.phone}</p>\n          </>\n        )}\n\n        <div className=\"CurrentUser__button\">\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={this.clear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosFromServer } from './api';\n\ninterface State {\n  todos: Todo[],\n  selectedUserId: number,\n  inputValue: string,\n  selectValue: string,\n  loading: boolean,\n  errorMessage: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n    inputValue: '',\n    selectValue: 'all',\n    loading: false,\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    this.getTodos();\n  }\n\n  getTodos = async (completed?: boolean) => {\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      const todosFromServer = await getTodosFromServer(completed);\n\n      this.setState({\n        todos: [...todosFromServer],\n      });\n    } catch (error) {\n      this.setState({\n        errorMessage: 'Oops... Server is not responding',\n      });\n    } finally {\n      setTimeout(() => {\n        this.setState({\n          loading: false,\n        });\n      }, 500);\n    }\n  };\n\n  selectUserHandler = (userId: string) => {\n    const userNewId = +userId;\n\n    if (this.state.selectedUserId !== userNewId) {\n      this.setState({ selectedUserId: userNewId });\n    }\n  };\n\n  changeInputValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      inputValue: value,\n    });\n  };\n\n  changeSelectValue = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.filterBySelect(value);\n\n    this.setState({\n      selectValue: value,\n    });\n  };\n\n  filterBySelect = async (selectValue: string) => {\n    this.setState({\n      loading: true,\n    });\n\n    switch (selectValue) {\n      case 'completed':\n        this.getTodos(true);\n        break;\n\n      case 'not completed':\n        this.getTodos(false);\n        break;\n\n      default:\n        this.getTodos();\n        break;\n    }\n  };\n\n  getTodosFilteredByInput = (todos: Todo[]) => {\n    const { inputValue } = this.state;\n\n    if (inputValue.length) {\n      return todos\n        .filter(todo => todo.title.toLowerCase().includes(inputValue.toLowerCase()));\n    }\n\n    return todos;\n  };\n\n  shuffle = (todos: Todo[]) => {\n    const randomizedTodos = todos;\n\n    for (let i = randomizedTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [randomizedTodos[i], randomizedTodos[j]] = [randomizedTodos[j], randomizedTodos[i]];\n    }\n\n    return randomizedTodos;\n  };\n\n  randomize = () => {\n    this.setState(prevState => ({\n      todos: this.shuffle(prevState.todos),\n    }));\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      selectValue,\n      todos,\n      loading,\n      errorMessage,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.getTodosFilteredByInput(todos)}\n            selectedUserId={selectedUserId}\n            inputValue={this.state.inputValue}\n            selectValue={selectValue}\n            loading={loading}\n            errorMessage={errorMessage}\n            selectUserHandler={this.selectUserHandler}\n            changeInputValue={this.changeInputValue}\n            changeSelectValue={this.changeSelectValue}\n            randomize={this.randomize}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId\n              ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearUser={this.clearUser}\n                />\n              )\n              : (\n                'No user selected'\n              )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}