{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","inputValue","selectValue","selectUserHandler","changeInputValue","changeSelectValue","randomize","className","InputGroup","FormControl","value","onChange","placeholder","Form","Select","type","onClick","length","map","todo","cn","completed","htmlFor","id","checked","readOnly","title","userId","getAllTodos","fetch","then","response","json","getUser","API_USERS_URL","getTodoByComlete","complited","toString","CurrentUser","state","user","isNoUserErrorVisible","clear","setState","props","clearUser","a","this","selectUser","prevProps","name","email","phone","React","PureComponent","App","getTodosFromServer","todosFromServer","userNewId","event","target","filterBySelect","getTodosFilteredByInput","filter","toLowerCase","includes","shuffle","randomizedTodos","i","j","Math","floor","random","prevState","Component","ReactDOM","render","document","getElementById"],"mappings":"4XAqBaA,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MACAC,EAFuC,EAEvCA,eACAC,EAHuC,EAGvCA,WACAC,EAJuC,EAIvCA,YACAC,EALuC,EAKvCA,kBACAC,EANuC,EAMvCA,iBACAC,EAPuC,EAOvCA,kBACAC,EARuC,EAQvCA,UARuC,OAUvC,sBAAKC,UAAU,WAAf,UACE,wCACA,8BACE,cAACC,EAAA,EAAD,CAAYD,UAAU,OAAtB,SACE,sBAAKA,UAAU,0BAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAACE,EAAA,EAAD,CACEC,MAAOT,EACPU,SAAUP,EACVQ,YAAY,sBAGhB,qBAAKL,UAAU,mBAAf,SACE,eAACM,EAAA,EAAKC,OAAN,CACEJ,MAAOR,EACPS,SAAUN,EAFZ,UAIE,wBAAQK,MAAM,MAAd,iBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,gBAAd,gCAGJ,wBACEH,UAAU,0BACVQ,KAAK,SACLC,QAASV,EAHX,8BAWN,qBAAKC,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACoB,IAAjBR,EAAMkB,QAAgBlB,EAAMmB,KAAI,SAAAC,GAAI,OACnC,qBACEZ,UAAWa,IAAG,iBACZ,CAAE,0BAA2BD,EAAKE,WAClC,CAAE,6BAA8BF,EAAKE,YAHzC,UAME,wBAAOC,QAASH,EAAKI,GAArB,UACE,uBACEA,GAAIJ,EAAKI,GACTR,KAAK,WACLS,QAASL,EAAKE,UACdI,UAAQ,IAEV,4BAAIN,EAAKO,WAGX,wBACEnB,UAAWa,IAAG,+BACZ,CAAE,mCAAoCD,EAAKQ,SAAW3B,IACxDe,KAAK,SACLL,MAAOS,EAAKQ,OACZX,QAAS,kBAAMb,EAAkBgB,EAAKQ,SALxC,yBAOYR,EAAKQ,YAnBZR,EAAKI,e,8BCpEf,SAASK,IACd,OAAOC,MAHU,2CAIdC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,SAASC,EAAQN,GAEtB,IAAMO,EAAa,kDAA8CP,GAEjE,OAAOE,MAAMK,GACVJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,SAASG,EAAiBC,GAE/B,IAAMF,EAAa,4DAAwDE,EAAUC,YAErF,OAAOR,MAAMK,GACVJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCNxB,IAAMM,EAAb,4MACEC,MAAe,CACbC,KAAM,KACNC,sBAAsB,GAH1B,EAgBEC,MAAQ,WACN,EAAKC,SAAS,CACZH,KAAM,OAGR,EAAKI,MAAMC,aArBf,8FAME,sBAAAC,EAAA,sDACEC,KAAKC,aADP,gDANF,6HAUE,WAAyBC,GAAzB,SAAAH,EAAA,yDACMC,KAAKH,MAAMjB,SAAWsB,EAAUtB,OADtC,gCAEUoB,KAAKC,aAFf,gDAVF,sHAwBE,4BAAAF,EAAA,+EAE6Bb,EAAQc,KAAKH,MAAMjB,QAFhD,OAEUa,EAFV,OAIIO,KAAKJ,SAAS,CACZH,OACAC,sBAAsB,IAN5B,gDASIM,KAAKJ,SAAS,CAAEF,sBAAsB,IAT1C,yDAxBF,0EAqCE,WACE,MAAuCM,KAAKR,MAApCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,qBAEd,OACE,gCACGA,GACC,gCACE,oBACElC,UAAU,+CADZ,SAGE,mEAEF,qBAAKA,UAAU,sBAAf,SACE,wBACEA,UAAU,SACVQ,KAAK,SACLC,QAAS+B,KAAKL,MAHhB,yBAUJD,GACA,sBAAKlC,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,+DAAyBiC,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAMjB,QAElE,oBAAIhB,UAAU,oBAAd,gBAAmCiC,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMU,OACzC,mBAAG3C,UAAU,qBAAb,gBAAmCiC,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMW,QACzC,mBAAG5C,UAAU,qBAAb,gBAAmCiC,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMY,QACzC,qBAAK7C,UAAU,sBAAf,SACE,wBACEA,UAAU,SACVQ,KAAK,SACLC,QAAS+B,KAAKL,MAHhB,+BApEd,GAAiCW,IAAMC,eCDjCC,E,4MACJhB,MAAe,CACbxC,MAAO,GACPC,eAAgB,EAChBC,WAAY,GACZC,YAAa,O,EAOfsD,mBAAqB,WACnB5B,IACGE,MAAK,SAAA2B,GACJ,EAAKd,SAAS,CACZ5C,MAAM,YAAK0D,S,EAKnBtD,kBAAoB,SAACwB,GACnB,IAAM+B,GAAa/B,EAEf,EAAKY,MAAMvC,iBAAmB0D,GAChC,EAAKf,SAAS,CAAE3C,eAAgB0D,K,EAIpCtD,iBAAmB,SAACuD,GAClB,IAAQjD,EAAUiD,EAAMC,OAAhBlD,MAER,EAAKiC,SAAS,CACZ1C,WAAYS,K,EAIhBL,kBAAoB,SAACsD,GACnB,IAAQjD,EAAUiD,EAAMC,OAAhBlD,MAER,EAAKmD,eAAenD,GAEpB,EAAKiC,SAAS,CACZzC,YAAaQ,K,EAIjBmD,eAAiB,SAAC3D,GAChB,OAAQA,GACN,IAAK,YACHiC,GAAiB,GACdL,MAAK,SAAA2B,GACJ,EAAKd,SAAS,CAAE5C,MAAM,YAAK0D,QAE/B,MAEF,IAAK,gBACHtB,GAAiB,GACdL,MAAK,SAAA2B,GACJ,EAAKd,SAAS,CAAE5C,MAAM,YAAK0D,QAE/B,MAEF,QACE7B,IACGE,MAAK,SAAA2B,GACJ,EAAKd,SAAS,CACZ5C,MAAM,YAAK0D,U,EAOvBK,wBAA0B,SAAC/D,EAAeE,GACxC,OAAIA,EAAWgB,OACNlB,EACJgE,QAAO,SAAA5C,GAAI,OAAIA,EAAKO,MAAMsC,cAAcC,SAAShE,EAAW+D,kBAG1DjE,G,EAGTmE,QAAU,SAACnE,GAGT,IAFA,IAAMoE,EAAkBpE,EAEfqE,EAAID,EAAgBlD,OAAS,EAAGmD,EAAI,EAAGA,GAAK,EAAG,CACtD,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADY,EAGX,CAACD,EAAgBE,GAAIF,EAAgBC,IAA/ED,EAAgBC,GAHqC,KAGjCD,EAAgBE,GAHiB,KAMxD,OAAOF,G,EAGT7D,UAAY,WACV,EAAKqC,UAAS,SAAA8B,GAAS,MAAK,CAC1B1E,MAAO,EAAKmE,QAAQO,EAAU1E,Y,EAIlC8C,UAAY,WACV,EAAKF,SAAS,CAAE3C,eAAgB,K,uDA9FlC,WACE+C,KAAKS,uB,oBAgGP,WACE,MAKIT,KAAKR,MAJPvC,EADF,EACEA,eACAE,EAFF,EAEEA,YACAD,EAHF,EAGEA,WACAF,EAJF,EAIEA,MAGF,OACE,mCACE,sBAAKQ,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACER,MAAOgD,KAAKe,wBAAwB/D,EAAOE,GAC3CD,eAAgBA,EAChBC,WAAY8C,KAAKR,MAAMtC,WACvBC,YAAaA,EACbC,kBAAmB4C,KAAK5C,kBACxBC,iBAAkB2C,KAAK3C,iBACvBC,kBAAmB0C,KAAK1C,kBACxBC,UAAWyC,KAAKzC,cAIpB,qBAAKC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGP,EACC,cAAC,EAAD,CACE2B,OAAQ3B,EACR6C,UAAWE,KAAKF,YAEhB,gC,GAxIAQ,IAAMqB,WAiJTnB,IC5JfoB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.51ec75b6.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\nimport cn from 'classnames';\nimport {\n  InputGroup,\n  FormControl,\n  Form,\n} from 'react-bootstrap';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  inputValue: string,\n  selectValue: string,\n  selectUserHandler: (userId: string) => void,\n  changeInputValue: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  changeSelectValue: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  randomize: () => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  inputValue,\n  selectValue,\n  selectUserHandler,\n  changeInputValue,\n  changeSelectValue,\n  randomize,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div>\n      <InputGroup className=\"mb-3\">\n        <div className=\"TodoList__control-panel\">\n          <div className=\"TodoList__input\">\n            <FormControl\n              value={inputValue}\n              onChange={changeInputValue}\n              placeholder=\"Search by title\"\n            />\n          </div>\n          <div className=\"TodoList__select\">\n            <Form.Select\n              value={selectValue}\n              onChange={changeSelectValue}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"not completed\">Not completed</option>\n            </Form.Select>\n          </div>\n          <button\n            className=\"button TodoList__button\"\n            type=\"button\"\n            onClick={randomize}\n          >\n            Randomize\n          </button>\n        </div>\n      </InputGroup>\n    </div>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.length !== 0 && todos.map(todo => (\n          <li\n            className={cn('TodoList__item',\n              { 'TodoList__item--checked': todo.completed },\n              { 'TodoList__item--unchecked': !todo.completed })}\n            key={todo.id}\n          >\n            <label htmlFor={todo.id}>\n              <input\n                id={todo.id}\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={cn('TodoList__user-button button',\n                { 'TodoList__user-button--selected': +todo.userId === selectedUserId })}\n              type=\"button\"\n              value={todo.userId}\n              onClick={() => selectUserHandler(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","// eslint-disable-next-line\nconst API_TODOS_URL = `https://mate.academy/students-api/todos`;\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(API_TODOS_URL)\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  // eslint-disable-next-line\n  const API_USERS_URL = `https://mate.academy/students-api/users/${userId}`;\n\n  return fetch(API_USERS_URL)\n    .then(response => response.json());\n}\n\nexport function getTodoByComlete(complited: boolean): Promise<Todo[]> {\n  // eslint-disable-next-line\n  const API_USERS_URL = `https://mate.academy/students-api/todos?completed=${complited.toString()}`;\n\n  return fetch(API_USERS_URL)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  clearUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n  isNoUserErrorVisible: boolean,\n};\n\nexport class CurrentUser extends React.PureComponent<Props, State> {\n  state: State = {\n    user: null,\n    isNoUserErrorVisible: false,\n  };\n\n  async componentDidMount() {\n    this.selectUser();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (this.props.userId !== prevProps.userId) {\n      await this.selectUser();\n    }\n  }\n\n  clear = () => {\n    this.setState({\n      user: null,\n    });\n\n    this.props.clearUser();\n  };\n\n  async selectUser() {\n    try {\n      const user: User = await getUser(this.props.userId);\n\n      this.setState({\n        user,\n        isNoUserErrorVisible: false,\n      });\n    } catch (error) {\n      this.setState({ isNoUserErrorVisible: true });\n    }\n  }\n\n  render() {\n    const { user, isNoUserErrorVisible } = this.state;\n\n    return (\n      <div>\n        {isNoUserErrorVisible && (\n          <div>\n            <h2\n              className=\"CurrentUser__title CurrentUser__title--error\"\n            >\n              <span>Error: Can not find the user!</span>\n            </h2>\n            <div className=\"CurrentUser__button\">\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.clear}\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        )}\n        {!isNoUserErrorVisible && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n            <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n            <p className=\"CurrentUser__email\">{user?.email}</p>\n            <p className=\"CurrentUser__phone\">{user?.phone}</p>\n            <div className=\"CurrentUser__button\">\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.clear}\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos, getTodoByComlete } from './api';\n\ninterface State {\n  todos: Todo[],\n  selectedUserId: number,\n  inputValue: string,\n  selectValue: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n    inputValue: '',\n    selectValue: 'all',\n  };\n\n  componentDidMount() {\n    this.getTodosFromServer();\n  }\n\n  getTodosFromServer = () => {\n    getAllTodos()\n      .then(todosFromServer => {\n        this.setState({\n          todos: [...todosFromServer],\n        });\n      });\n  };\n\n  selectUserHandler = (userId: string) => {\n    const userNewId = +userId;\n\n    if (this.state.selectedUserId !== userNewId) {\n      this.setState({ selectedUserId: userNewId });\n    }\n  };\n\n  changeInputValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      inputValue: value,\n    });\n  };\n\n  changeSelectValue = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.filterBySelect(value);\n\n    this.setState({\n      selectValue: value,\n    });\n  };\n\n  filterBySelect = (selectValue: string) => {\n    switch (selectValue) {\n      case 'completed':\n        getTodoByComlete(true)\n          .then(todosFromServer => {\n            this.setState({ todos: [...todosFromServer] });\n          });\n        break;\n\n      case 'not completed':\n        getTodoByComlete(false)\n          .then(todosFromServer => {\n            this.setState({ todos: [...todosFromServer] });\n          });\n        break;\n\n      default:\n        getAllTodos()\n          .then(todosFromServer => {\n            this.setState({\n              todos: [...todosFromServer],\n            });\n          });\n        break;\n    }\n  };\n\n  getTodosFilteredByInput = (todos: Todo[], inputValue: string) => {\n    if (inputValue.length) {\n      return todos\n        .filter(todo => todo.title.toLowerCase().includes(inputValue.toLowerCase()));\n    }\n\n    return todos;\n  };\n\n  shuffle = (todos: Todo[]) => {\n    const randomizedTodos = todos;\n\n    for (let i = randomizedTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [randomizedTodos[i], randomizedTodos[j]] = [randomizedTodos[j], randomizedTodos[i]];\n    }\n\n    return randomizedTodos;\n  };\n\n  randomize = () => {\n    this.setState(prevState => ({\n      todos: this.shuffle(prevState.todos),\n    }));\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      selectValue,\n      inputValue,\n      todos,\n    } = this.state;\n\n    return (\n      <>\n        <div className=\"App\">\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={this.getTodosFilteredByInput(todos, inputValue)}\n              selectedUserId={selectedUserId}\n              inputValue={this.state.inputValue}\n              selectValue={selectValue}\n              selectUserHandler={this.selectUserHandler}\n              changeInputValue={this.changeInputValue}\n              changeSelectValue={this.changeSelectValue}\n              randomize={this.randomize}\n            />\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearUser={this.clearUser}\n                />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}